<?php

namespace App\Nova\Metrics;

use App\Models\ChargeReq;
use App\Models\ChargeReqBank;
use Laravel\Nova\Http\Requests\NovaRequest;
use Laravel\Nova\Metrics\Value;
use Laravel\Nova\Nova;

class BankRechargeCurrency extends Value
{


    public function name()
    {
        return __('BankRechargeCurrency'); // TODO: Change the autogenerated stub
    }
    /**
     * Calculate the value of the metric.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @return mixed
     */
    public function calculate(NovaRequest $request)
    {
        $firstChargeUsers = ChargeReq::query()
            ->select('uid')
            ->where('status', 2)
            ->whereIn('id', function ($query) {
                $query->selectRaw('MIN(id)')
                    ->from('charge_req')
                    ->where('status', 2)
                    ->groupBy('uid');
            });
    
        return $this->count(
            $request,
            $firstChargeUsers
        )->format('currency');
    }

    /**
     * Get the ranges available for the metric.
     *
     * @return array
     */
    public function ranges()
    {
        return [
            'TODAY' => Nova::__('Today'),
            'YESTERDAY' => Nova::__('Yesterday'),
            30 => Nova::__('30 Days'),
            60 => Nova::__('60 Days'),
            365 => Nova::__('365 Days'),
            'MTD' => Nova::__('Month To Date'),
            'QTD' => Nova::__('Quarter To Date'),
            'YTD' => Nova::__('Year To Date'),
            'ALL' => Nova::__('All Time')
        ];
    }

    /**
     * Determine the amount of time the results of the metric should be cached.
     *
     * @return \DateTimeInterface|\DateInterval|float|int|null
     */
    public function cacheFor()
    {
        // return now()->addMinutes(5);
    }
}
